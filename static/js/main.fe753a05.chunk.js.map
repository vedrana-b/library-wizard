{"version":3,"sources":["assets/success.svg","components/steps.jsx","components/genres.jsx","components/subgenres.jsx","components/information.jsx","components/addSubgenre.jsx","components/successMessage.jsx","components/wizard.jsx","services/libraryService.js","services/bookService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Steps","flow","step","className","map","flowStep","index","key","Number","label","Genres","genres","onNextStep","onAddGenre","bookGenre","selectedGenre","useState","setSelectedGenre","Fragment","genre","onClick","handleGenres","id","name","Joi","object","number","required","string","subgenres","array","optional","validate","error","Subgenres","onAddSubgenre","onAddNewSubgenre","onBackStep","bookSubgenre","selectedSubgenre","newSubgenre","setSelectedSubgenre","addNewSubgenre","setAddNewSubgenre","validateSubgenres","isDescriptionRequired","boolean","validateAddNew","valid","subgenre","handleSubgenres","Information","onAddBook","errors","setErrors","title","author","publisher","isbn","date","numOfPages","format","desc","edition","editionLang","bookInformation","setBookInformation","setErrorMessage","min","allow","options","abortEarly","getError","prop","find","err","path","includes","forEach","type","message","context","value","onChange","target","placeholder","disabled","defaultValue","validationResult","details","AddNewSubgenre","description","setDescription","setName","result","input","SuccessMessage","onRestart","src","successLogo","Wizard","setGenres","information","book","setBook","setNewSubgenre","setStep","isFinished","setIsFinished","useEffect","Promise","resolve","reject","then","allGenres","handleAddGenre","handleAddSubgenre","handleNextStep","handleBackStep","handleAddNewSubgenre","handleNewSubgenre","handleSuccess","newBook","console","log","status","bookService","response","resolveFlow","steps","genreStep","component","subgenreStep","addNewSubgenreStep","informationStep","placeholderStep","initFlow","standardFlow","customFlow","_","isEmpty","undefined","renderSwitch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fe753a05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.8b4d6e74.svg\";","import React, { useState } from \"react\";\r\n\r\nconst Steps = ({ flow, step }) => {\r\n  return (\r\n    <div className=\"grid-x steps\">\r\n      {flow.map((flowStep, index) => {\r\n        return (\r\n          <div key={index} className=\"step\">\r\n            <div\r\n              className={\r\n                step === Number(flowStep.step || index + 1)\r\n                  ? \"step__counter active\"\r\n                  : \"step__counter\"\r\n              }\r\n            >\r\n              {flowStep.step || index + 1}\r\n            </div>\r\n            <div className=\"step__text\">\r\n              <h6>{flowStep.label}</h6>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Steps;\r\n","import React, { useState } from \"react\";\r\nimport Joi from \"joi-browser\";\r\n\r\nconst Genres = ({\r\n  genres,\r\n  onNextStep,\r\n  onAddGenre,\r\n  selectedGenre: bookGenre,\r\n}) => {\r\n  const [selectedGenre, setSelectedGenre] = useState(bookGenre);\r\n    \r\n  const handleGenres = (genre) => {\r\n    setSelectedGenre(genre);\r\n  };\r\n\r\n  /**\r\n   * Validates selected genre.\r\n   * Returns error if no genre is selected\r\n   */\r\n  const validation = () => {\r\n    const schema = Joi.object({\r\n      id: Joi.number().required(),\r\n      name: Joi.string().required(),\r\n      subgenres: Joi.array().optional(),\r\n    });\r\n    return schema.validate(selectedGenre);\r\n  };\r\n\r\n  /**\r\n   * Perform next step.\r\n   * If genre is not selected, user cannot go to next step\r\n   */\r\n  const nextHandler = () => {\r\n    if (!validation().error) {\r\n      onAddGenre(selectedGenre);\r\n      onNextStep();\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"grid-x genres\">\r\n        {genres.map((genre) => {\r\n          return (\r\n            <button\r\n              onClick={() => handleGenres(genre)}\r\n              key={genre.id}\r\n              id={genre.id}\r\n              className={\r\n                genre === selectedGenre\r\n                  ? \"button button__genre active\"\r\n                  : \"button button__genre\"\r\n              }\r\n            >\r\n              {genre.name}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"grid-x buttons\">\r\n        <button\r\n          onClick={nextHandler}\r\n          className=\"button button__control button__control--next\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Genres;\r\n","import React, { useState } from \"react\";\r\nimport Joi, { validate } from \"joi-browser\";\r\n\r\nconst Subgenres = ({\r\n  subgenres,\r\n  onNextStep,\r\n  onAddSubgenre,\r\n  onAddNewSubgenre,\r\n  onBackStep,\r\n  selectedSubgenre: bookSubgenre,\r\n  newSubgenre,\r\n}) => {\r\n  const [selectedSubgenre, setSelectedSubgenre] = useState(bookSubgenre);\r\n  const [addNewSubgenre, setAddNewSubgenre] = useState(newSubgenre);\r\n\r\n  /**\r\n   * Sets selected standard subgenre.\r\n   *\r\n   * @param {{id:string, name: string, isDescriptionRequired:boolean}} subgenre\r\n   */\r\n  const handleSubgenres = (subgenre) => {\r\n    setAddNewSubgenre(false);\r\n    setSelectedSubgenre(subgenre);\r\n  };\r\n\r\n  /**\r\n   * Sets flag for adding custom subgenre\r\n   */\r\n  const handleAddNewSubgenre = () => {\r\n    setAddNewSubgenre(true);\r\n    setSelectedSubgenre({});\r\n  };\r\n\r\n  /**\r\n   * Perform next step.\r\n   * If standard subgenre is not selected or option for adding new subgenre\r\n   * then user cannot go to next step\r\n   */\r\n  const nextHandler = () => {\r\n    if (!validateSubgenres().error !== !validateAddNew().error) {\r\n      onAddSubgenre(selectedSubgenre);\r\n      onAddNewSubgenre(addNewSubgenre);\r\n      onNextStep();\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validates selected subgenre.\r\n   * Returns error if no standard subgenre is selected\r\n   */\r\n  const validateSubgenres = () => {\r\n    const subgenreSchema = Joi.object({\r\n      id: Joi.number().required(),\r\n      name: Joi.string().required(),\r\n      isDescriptionRequired: Joi.boolean().optional(),\r\n    });\r\n    return subgenreSchema.validate(selectedSubgenre);\r\n  };\r\n\r\n  /**\r\n   * Validates if option for adding new subgenre is selected\r\n   * Return error if option is not selected\r\n   */\r\n  const validateAddNew = () => {\r\n    const addNewSchema = Joi.boolean().valid(true).required();\r\n    return addNewSchema.validate(addNewSubgenre);\r\n  };\r\n\r\n  const backHandler = () => {\r\n    onBackStep();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"grid-x genres\">\r\n        {subgenres.map((subgenre) => {\r\n          return (\r\n            <button\r\n              key={subgenre.id}\r\n              onClick={() => handleSubgenres(subgenre)}\r\n              className={\r\n                subgenre === selectedSubgenre\r\n                  ? \"button button__genre active\"\r\n                  : \"button button__genre\"\r\n              }\r\n            >\r\n              {subgenre.name}\r\n            </button>\r\n          );\r\n        })}\r\n        <button\r\n          onClick={handleAddNewSubgenre}\r\n          className={\r\n            addNewSubgenre\r\n              ? \"button button__genre active\"\r\n              : \"button button__genre\"\r\n          }\r\n        >\r\n          Add new\r\n        </button>\r\n      </div>\r\n      <div className=\"grid-x buttons\">\r\n        <button\r\n          onClick={backHandler}\r\n          className=\"button button__control button__control--back\"\r\n        >\r\n          <i className=\"fa fa-angle-left button__icon\"></i>\r\n          Back\r\n        </button>\r\n        <button\r\n          onClick={nextHandler}\r\n          className=\"button button__control button__control--next\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Subgenres;\r\n","import React, { useState } from \"react\";\r\nimport Joi from \"joi-browser\";\r\n\r\nconst Information = ({ onAddBook, onBackStep, isDescriptionRequired }) => {\r\n  const [errors, setErrors] = useState([]);\r\n  const [bookInformation, setBookInformation] = useState({\r\n    title: \"\",\r\n    author: \"\",\r\n    publisher: \"\",\r\n    isbn: \"\",\r\n    date: \"\",\r\n    numOfPages: \"\",\r\n    format: \"\",\r\n    desc: \"\",\r\n    edition: \"\",\r\n    editionLang: \"\",\r\n  });\r\n\r\n  /**\r\n   * 1. Validates form\r\n   * 2. Passing book information to parent component if there is no error\r\n   * 3. Sets errors if present\r\n   */\r\n  const handleSuccess = () => {\r\n    setErrors([]);\r\n    const validationResult = validate();\r\n    if (!validationResult.error) {\r\n      onAddBook(bookInformation);\r\n    } else {\r\n      setErrors(validationResult.error.details);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validates form\r\n   */\r\n  const validate = () => {\r\n    const schema = Joi.object({\r\n      title: Joi.string().required().error(setErrorMessage(\"Title\")),\r\n      author: Joi.string().required().error(setErrorMessage(\"Author\")),\r\n      publisher: Joi.string().required().error(setErrorMessage(\"Publisher\")),\r\n      isbn: Joi.string().required().error(setErrorMessage(\"Isbn\")),\r\n      date: Joi.date().required().error(setErrorMessage(\"Date\")),\r\n      numOfPages: Joi.number()\r\n        .required()\r\n        .min(1)\r\n        .error(setErrorMessage(\"Number of pages\")),\r\n      format: Joi.string().required().error(setErrorMessage(\"Format\")),\r\n      edition: Joi.string().required().error(setErrorMessage(\"Edition\")),\r\n      editionLang: Joi.string()\r\n        .required()\r\n        .error(setErrorMessage(\"Edition Language\")),\r\n      desc: isDescriptionRequired\r\n        ? Joi.string().required().error(setErrorMessage(\"Description\"))\r\n        : Joi.string().allow(\"\").optional(),\r\n    }).options({\r\n      abortEarly: false,\r\n    });\r\n\r\n    return schema.validate(bookInformation);\r\n  };\r\n\r\n  const backHandler = () => {\r\n    onBackStep();\r\n  };\r\n\r\n   /**\r\n   * Returns error for field with name provided\r\n   * \r\n   * @param {string} prop - field name\r\n   */\r\n  const getError = (prop) => {\r\n    return errors && errors.find((err) => err.path.includes(prop));\r\n  };\r\n\r\n  /**\r\n   * Used for setting custom error messages\r\n   * \r\n   * @param {string} prop - field name\r\n   */\r\n  const setErrorMessage = (prop) => {\r\n    return (errors) => {\r\n      errors.forEach((err) => {\r\n        switch (err.type) {\r\n          case \"any.required\":\r\n            err.message = `${prop} is required field`;\r\n            break;\r\n          case \"string.base\":\r\n            err.message = `${prop} should be a type of 'text'`;\r\n            break;\r\n          case \"any.empty\":\r\n            err.message = `${prop} should not be empty`;\r\n            break;\r\n          case \"number.base\":\r\n            err.message = `${prop} should be a type 'integer'`;\r\n            break;\r\n          case \"number.min\":\r\n            err.message = `${prop} should be greater than ${err.context.min}'`;\r\n            break;\r\n          case \"date.base\":\r\n            err.message = `${prop} should be a type of date`;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n      return errors;\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          Book title\r\n          <input\r\n            value={bookInformation.title}\r\n            onChange={({ target }) =>\r\n              setBookInformation({ ...bookInformation, title: target.value })\r\n            }\r\n            className=\"book__input\"\r\n            placeholder=\"Book title\"\r\n          ></input>\r\n          {getError(\"title\") && (\r\n            <p className=\"error__msg\">{getError(\"title\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          Author\r\n          <select\r\n            className=\"book__input\"\r\n            value={bookInformation.author}\r\n            onChange={({ target }) =>\r\n              setBookInformation({ ...bookInformation, author: target.value })\r\n            }\r\n          >\r\n            <option value=\"\" disabled defaultValue>\r\n              Author\r\n            </option>\r\n            <option value=\"Jane Austen\">Jane Austen</option>\r\n            <option value=\"William Faulkner\">William Faulkner</option>\r\n          </select>\r\n          {getError(\"author\") && (\r\n            <p className=\"error__msg\">{getError(\"author\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          ISBN\r\n          <input\r\n            value={bookInformation.isbn}\r\n            onChange={({ target }) =>\r\n              setBookInformation({ ...bookInformation, isbn: target.value })\r\n            }\r\n            className=\"book__input\"\r\n            placeholder=\"ISBN\"\r\n          ></input>\r\n          {getError(\"isbn\") && (\r\n            <p className=\"error__msg\">{getError(\"isbn\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          Publisher\r\n          <select\r\n            value={bookInformation.publisher}\r\n            onChange={({ target }) =>\r\n              setBookInformation({\r\n                ...bookInformation,\r\n                publisher: target.value,\r\n              })\r\n            }\r\n            className=\"book__input\"\r\n          >\r\n            <option value=\"\" disabled defaultValue>\r\n              Publisher\r\n            </option>\r\n            <option value=\"Jane Austen\">Jane Austen</option>\r\n            <option value=\"William Faulkner\">William Faulkner</option>\r\n          </select>\r\n          {getError(\"publisher\") && (\r\n            <p className=\"error__msg\">{getError(\"publisher\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label\r\n          value={bookInformation.date}\r\n          onChange={({ target }) =>\r\n            setBookInformation({ ...bookInformation, date: target.value })\r\n          }\r\n          className=\"book__label\"\r\n        >\r\n          Data published\r\n          <input type=\"date\" className=\"book__input book__input--md\"></input>\r\n          {getError(\"date\") && (\r\n            <p className=\"error__msg\">{getError(\"date\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          Number of pages\r\n          <input\r\n            value={bookInformation.numOfPages}\r\n            onChange={({ target }) =>\r\n              setBookInformation({\r\n                ...bookInformation,\r\n                numOfPages: target.value,\r\n              })\r\n            }\r\n            className=\"book__input book__input--sm\"\r\n            placeholder=\"Number of pages\"\r\n          ></input>\r\n          {getError(\"numOfPages\") && (\r\n            <p className=\"error__msg\">{getError(\"numOfPages\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          Format\r\n          <select\r\n            value={bookInformation.format}\r\n            onChange={({ target }) =>\r\n              setBookInformation({ ...bookInformation, format: target.value })\r\n            }\r\n            className=\"book__input book__input--md\"\r\n          >\r\n            <option value=\"\" disabled defaultValue>\r\n              Format\r\n            </option>\r\n            <option value=\"format 1\">Format 1</option>\r\n            <option value=\"format 2\">Format 2</option>\r\n          </select>\r\n          {getError(\"format\") && (\r\n            <p className=\"error__msg\">{getError(\"format\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label book__label--sm\">\r\n          Edition\r\n          <input\r\n            value={bookInformation.edition}\r\n            onChange={({ target }) =>\r\n              setBookInformation({ ...bookInformation, edition: target.value })\r\n            }\r\n            className=\"book__input book__input--md\"\r\n            placeholder=\"Edition\"\r\n          ></input>\r\n          {getError(\"edition\") && (\r\n            <p className=\"error__msg\">{getError(\"edition\").message}</p>\r\n          )}\r\n        </label>\r\n\r\n        <label className=\"book__label\">\r\n          Edition language\r\n          <select\r\n            value={bookInformation.editionLang}\r\n            onChange={({ target }) =>\r\n              setBookInformation({\r\n                ...bookInformation,\r\n                editionLang: target.value,\r\n              })\r\n            }\r\n            className=\"book__input book__input--md\"\r\n          >\r\n            <option value=\"\" disabled defaultValue>\r\n              Edition language\r\n            </option>\r\n            <option value=\"format 1\">Format 1</option>\r\n            <option value=\"format 2\">Format 2</option>\r\n          </select>\r\n          {getError(\"editionLang\") && (\r\n            <p className=\"error__msg\">{getError(\"editionLang\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x\">\r\n        <label className=\"book__label\">\r\n          Description\r\n          <textarea\r\n            value={bookInformation.desc}\r\n            onChange={({ target }) =>\r\n              setBookInformation({ ...bookInformation, desc: target.value })\r\n            }\r\n            className=\"book__textarea\"\r\n            placeholder=\"Type the description...\"\r\n          ></textarea>\r\n          {getError(\"desc\") && (\r\n            <p className=\"error__msg\">{getError(\"desc\").message}</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"grid-x buttons\">\r\n        <button\r\n          onClick={backHandler}\r\n          className=\"button button__control button__control--back\"\r\n        >\r\n          <i className=\"fa fa-angle-left button__icon\"></i>Back\r\n        </button>\r\n        <button\r\n          onClick={handleSuccess}\r\n          className=\"button button__control button__control--next\"\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import React, { useState } from \"react\";\r\nimport Joi from \"joi-browser\";\r\n\r\nconst AddNewSubgenre = ({ onAddNewSubgenre, onNextStep, onBackStep }) => {\r\n  const [description, setDescription] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  /**\r\n   * Sets isDescriptionRequired to true/false based on checkbox\r\n   */\r\n  const handleDescription = () => {\r\n    setDescription(!description);\r\n  };\r\n\r\n  /**\r\n   * Performs next step.\r\n   * If name is not provided, user cannot go to next step\r\n   */\r\n  const nextHandler = () => {\r\n    const validationResult = validate();\r\n    if (!validationResult.error) {\r\n      onAddNewSubgenre(description, name);\r\n      onNextStep();\r\n    } else {\r\n      setErrors(validationResult.error.details);\r\n    }\r\n  };\r\n\r\n  const handleName = ({ target: input }) => {\r\n    setName(input.value);\r\n  };\r\n\r\n  /**\r\n   * Validates new subgenre.\r\n   * Returns error if name is not provided\r\n   */\r\n  const validate = () => {\r\n    const result = {\r\n      description,\r\n      name,\r\n    };\r\n    const schema = Joi.object({\r\n      description: Joi.boolean(),\r\n      name: Joi.string()\r\n        .required()\r\n        .error((errors) => {\r\n          errors.forEach((err) => {\r\n            switch (err.type) {\r\n              case \"any.required\":\r\n                err.message = \"Bookname is a required field\";\r\n                break;\r\n              case \"string.base\":\r\n                err.message = `Bookname should be a type of 'text'`;\r\n                break;\r\n              case \"any.empty\":\r\n                err.message = `Bookname cannot be an empty field`;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n          return errors;\r\n        }),\r\n    });\r\n    return schema.validate(result);\r\n  };\r\n\r\n  /**\r\n   * Returns error for field with name provided\r\n   * \r\n   * @param {string} prop - field name\r\n   */\r\n  const getError = (prop) => {\r\n    return errors && errors.find((err) => err.path.includes(prop));\r\n  };\r\n  \r\n  const backHandler = () => {\r\n    onBackStep();\r\n  };\r\n\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"grid-x error\">\r\n        <label className=\"book__subgenre\">\r\n          <input\r\n            value={name}\r\n            onChange={handleName}\r\n            className=\"book__input\"\r\n            placeholder=\"Subgenre name\"\r\n          ></input>\r\n        </label>\r\n        {getError(\"name\") && (\r\n          <p className=\"error__msg\">{getError(\"name\").message}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"grid-x book__new-subgenre\">\r\n        <input onChange={handleDescription} type=\"checkbox\"></input>\r\n        <p className=\"book__new-subgenre--desc\">\r\n          Description is required for this subgenre\r\n        </p>\r\n      </div>\r\n      <div className=\"grid-x buttons\">\r\n        <button\r\n          onClick={backHandler}\r\n          className=\"button button__control button__control--back\"\r\n        >\r\n          <i className=\"fa fa-angle-left button__icon\"></i>\r\n          Back\r\n        </button>\r\n        <button\r\n          onClick={nextHandler}\r\n          className=\"button button__control button__control--next\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewSubgenre;\r\n","import React from \"react\";\r\nimport successLogo from \"../assets/success.svg\";\r\n\r\nconst SuccessMessage = ({ onRestart }) => {\r\n  return (\r\n    <div className=\"success-page\">\r\n      <img className=\"success-page__logo\" src={successLogo}></img>\r\n      <div className=\"success-page__text\">\r\n        <p>Book added successfully</p>\r\n      </div>\r\n      <div className=\"success-page__btn\">\r\n        <button\r\n          onClick={onRestart}\r\n          className=\"button button__success button__control--next\"\r\n        >\r\n          Add another book\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuccessMessage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Steps from \"./steps\";\r\nimport Genres from \"./genres\";\r\nimport Subgenres from \"./subgenres\";\r\nimport Information from \"./information\";\r\nimport AddNewSubgenre from \"./addSubgenre\";\r\nimport SuccessMessage from \"./successMessage\";\r\nimport _ from \"lodash\";\r\n\r\nimport * as libraryService from \"../services/libraryService\";\r\nimport * as bookService from \"../services/bookService\";\r\n\r\nconst Wizard = () => {\r\n  const [genres, setGenres] = useState([]);\r\n  const [book, setBook] = useState({\r\n    genre: {},\r\n    subgenre: {},\r\n    information: {},\r\n  });\r\n  const [newSubgenre, setNewSubgenre] = useState();\r\n  const [step, setStep] = useState(1);\r\n  const [isFinished, setIsFinished] = useState();\r\n\r\n  /**\r\n   * Load initial genres\r\n   */\r\n  useEffect(() => {\r\n    libraryService.getGenre().then((allGenres) => {\r\n      setGenres(allGenres.genres);\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Add selected genre to book object\r\n   * \r\n   * @param {object} selectedGenre\r\n   */\r\n  const handleAddGenre = (selectedGenre) => {\r\n    setBook({ ...book, genre: selectedGenre });\r\n  };\r\n\r\n  /**\r\n   * Add selected subgenre to book object\r\n   * \r\n   * @param {object} selectedSubgenre\r\n   */\r\n  const handleAddSubgenre = (selectedSubgenre) => {\r\n    setBook({ ...book, subgenre: selectedSubgenre });\r\n  };\r\n\r\n  const handleNextStep = () => {\r\n    setStep(step + 1);\r\n  };\r\n\r\n  const handleBackStep = () => {\r\n    setStep(step - 1);\r\n  };\r\n\r\n  /**\r\n   * Checks if add new subgenre is clicked\r\n   * \r\n   * @param {boolean} addNewSubgenre\r\n   */\r\n  const handleAddNewSubgenre = (addNewSubgenre) => {\r\n    setNewSubgenre(addNewSubgenre);\r\n  };\r\n\r\n  /**\r\n   * Adds new subgenre to book object\r\n   * \r\n   * @param {boolean} description\r\n   * @param {string} name\r\n   */\r\n  const handleNewSubgenre = (description, name) => {\r\n    setBook({\r\n      ...book,\r\n      subgenre: { name: name, isDescriptionRequired: description },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Adds object with new book information to book object\r\n   * Sending new book to backend service\r\n   * \r\n   * @param {object} information\r\n   */\r\n  const handleSuccess = (information) => {\r\n    const newBook = { ...book, information };\r\n    setBook(newBook);\r\n    bookService.addBook(newBook).then((response) => {\r\n      if (response.status === 201) {\r\n        setIsFinished(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns corresponding component based on current flow.\r\n   * Current flow is determined with function resolveFlow()\r\n   * \r\n   * @param {number} step - current step\r\n   */\r\n  const renderSwitch = (step) => {\r\n    return resolveFlow()[step - 1].component;\r\n  };\r\n\r\n  /**\r\n   * Returns current flow based on: \r\n   * 1. Init flow - contains two steps: genre, subgenre\r\n   * 2. Standard flow - contains three steps: genre, subgenre, information\r\n   * 3. Custom flow - contains four steps: genre, subgenre, new subgenre, information\r\n   * \r\n   * @returns current flow as array of steps\r\n   */\r\n  const resolveFlow = () => {\r\n    const steps = {\r\n      genreStep: {\r\n        label: \"Genre\",\r\n        component: (\r\n          <Genres\r\n            selectedGenre={book.genre}\r\n            genres={genres}\r\n            onAddGenre={handleAddGenre}\r\n            onNextStep={handleNextStep}\r\n          />\r\n        ),\r\n      },\r\n      subgenreStep: {\r\n        label: \"Subgenre\",\r\n        component: (\r\n          <Subgenres\r\n            onNextStep={handleNextStep}\r\n            onBackStep={handleBackStep}\r\n            onAddSubgenre={handleAddSubgenre}\r\n            subgenres={book.genre.subgenres}\r\n            onAddNewSubgenre={handleAddNewSubgenre}\r\n            selectedSubgenre={book.subgenre}\r\n            newSubgenre={newSubgenre}\r\n          />\r\n        ),\r\n      },\r\n      addNewSubgenreStep: {\r\n        label: \"Add new subgenre\",\r\n        component: (\r\n          <AddNewSubgenre\r\n            onAddNewSubgenre={handleNewSubgenre}\r\n            onNextStep={handleNextStep}\r\n            onBackStep={handleBackStep}\r\n          />\r\n        ),\r\n      },\r\n      informationStep: {\r\n        label: \"Information\",\r\n        component: (\r\n          <Information\r\n            onBackStep={handleBackStep}\r\n            onAddBook={handleSuccess}\r\n            isDescriptionRequired={book.subgenre.isDescriptionRequired}\r\n          />\r\n        ),\r\n      },\r\n      placeholderStep: {\r\n        label: \"\",\r\n        step: \"...\",\r\n        component: null,\r\n      },\r\n    };\r\n\r\n    const {\r\n      genreStep,\r\n      subgenreStep,\r\n      placeholderStep,\r\n      informationStep,\r\n      addNewSubgenreStep,\r\n    } = steps;\r\n\r\n    const initFlow = [genreStep, subgenreStep, placeholderStep];\r\n\r\n    const standardFlow = [genreStep, subgenreStep, informationStep];\r\n\r\n    const customFlow = [\r\n      genreStep,\r\n      subgenreStep,\r\n      addNewSubgenreStep,\r\n      informationStep,\r\n    ];\r\n\r\n    if (_.isEmpty(book.subgenre) && newSubgenre === undefined) {\r\n      return initFlow;\r\n    } else if (newSubgenre) {\r\n      return customFlow;\r\n    } else {\r\n      return standardFlow;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Used for adding new book and returning to first step\r\n   */\r\n  const restartHandler = () => {\r\n    setStep(1);\r\n    setBook({ genre: {}, subgenre: {} });\r\n    setNewSubgenre();\r\n    setIsFinished();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"grid-container lib\">\r\n        {isFinished ? (\r\n          <SuccessMessage onRestart={restartHandler} />\r\n        ) : (\r\n          <React.Fragment>\r\n            <div className=\"grid-x lib__title\">\r\n              <h5>Add book - New book</h5>\r\n            </div>\r\n            <Steps step={step} flow={resolveFlow()} />\r\n            {renderSwitch(step)}\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wizard;\r\n","import genres from './library.json';\r\n\r\nexport function getGenre() {\r\n    return new Promise((resolve, reject) => {\r\n        resolve(genres);\r\n    });\r\n}","export function addBook(book) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(\"POST /book: \", book);\r\n        resolve({\r\n            status: 201\r\n        });\r\n    });\r\n}","import React from 'react';\nimport './App.scss';\nimport Wizard from './components/wizard';\n\nfunction App() {\n  return (\n    <div>\n      <Wizard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}